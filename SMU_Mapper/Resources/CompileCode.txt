private static Dictionary<string, string> LoadLookup(string path)
                {
                        Dictionary<string, string> LoadLookup_d = new Dictionary<string, string>();
                        try
                        {
                            LoadLookup_d = System.IO.File.ReadAllLines(path).Select(x => x.Split('|')).ToDictionary(x => x[0], x => x[1]);
      
                            if(LoadLookup_d.Count() == 0)
                            System.Console.WriteLine("Warning - " + System.IO.Path.GetFileName(path) + " is empty");
                        }
                        catch(System.IO.FileNotFoundException nf)
                        {
                            System.Console.WriteLine("Error - loading lookups, couldn't find the lookup file.\nCheck that your path is correct:\n" + nf.FileName);
                            System.Environment.Exit(1);
                        }
                        catch (System.IndexOutOfRangeException)
                        {
                            System.Console.WriteLine("Error - loading lookup in " + System.IO.Path.GetFileName(path) +  "\n...most likely key/value pair is malformed");
                            System.Environment.Exit(1);
                        }

                        return LoadLookup_d;
                }

                private static Dictionary<string, Dictionary<string, string>> LoadAllLookups(params string[][] lookups)
                {
                    Dictionary<string, Dictionary<string, string>> d = new Dictionary<string, Dictionary<string, string>>();

                    foreach (string[] lookup in lookups)
                    {
                        d.Add(lookup[0], LoadLookup(lookup[1]));
                    }

                    return d;
                }

                private static string Lookup(string name, string key)
                {

                    Dictionary<string,string> d1;
                    string value = null;

                    if (_lookups.TryGetValue(name, out d1)) 
                    {
                        d1.TryGetValue(key, out value);
                    }

                    return value ?? key;

                }

             private static string VarLookup(string name)
             {
                    string value = null;

                    if (!_variables.TryGetValue(name, out value))
                    {
                        //variable not found
                    }
                    return value;

            }

         private static string _GetRefVal(string attribute,string elemid)
         {
            string value = "";

            if (elemid == "") return "";

            elemid = elemid.Replace("#", "");

            string RefType = refTable[attribute][0];
            string RefAttr = refTable[attribute][1];

            value = (from el in _xml.Elements(_ns + RefType)
                       where el.Attribute("elemId").Value == elemid
                       select el.Attribute(RefAttr).Value).Single();



                return value;
        }


    private static string _GetRelSts(XAttribute attribute)
    {
        try{ 
        if (attribute == null || attribute.Value == "") return "";

        var els = _xml.Elements(_ns + "ReleaseStatus").Where(x => x.Attribute("puid").Value == attribute.Value).Select(x => x.Attribute("name").Value).ToArray();
        string statuses = string.Join(",", els);

            return statuses;
        }
        catch { return "";}
     }

    private static string _SetRelSts(XAttribute attribute, string Val)
    {
        string newPUID = "";

        if (attribute == null || attribute.Value == "")
        { }
        else
        {
        
            if(Val == "")
            {
                return "";
            }
         

            newPUID = attribute.Value;

            var els = _xml.Elements(_ns + "ReleaseStatus").Where(x => x.Attribute("puid").Value == attribute.Value);

            foreach (var el in els)
            {

                if (Val == null)
                {
                    newPUID = "";
                    el.Remove();
                }
                else
                el.SetAttributeValue("name", Val);
            }
        }

        return newPUID;

    }

    private static string _GetRef(string attribute, string refVal){
            string elemId = "";

                if(refTable.ContainsKey(attribute))
                {
                    var dval = refTable[attribute];
                     var el = _xml.Elements(_ns + dval[0]).Where(x => x.Attribute(dval[1]).Value == refVal).Select(x => x.Attribute("elemId").Value);

                    if (el.Count() == 1)
                        elemId = el.Single();
                    else
                        return "";
                }

             return ("#" + elemId);
            }

    private static void _RecordTypeChange(string puid, string from, string to)
    {
            _TypeChangeLog[puid] = new string[2]{from,to};
    }

    private static void _TCPropagateItem(XElement _item, string sItem, string sRev, string sMasterForm, string sMasterFormS, string sMasterRevForm, string sMasterRevFormS, string tItem, string tRevision, string tMasterForm, string tMasterFormS, string tMasterRevForm, string tMasterRevFormS)
    {
        var Item = new Classes.ItemClass(_item, sRev, sMasterFormS, sMasterRevFormS);

        //change Item
        _RecordTypeChange(Item.element.Attribute("puid").Value, Item.element.Attribute("object_type").Value, tItem);
        Item.element.SetAttributeValue("object_type", tItem);
        Item.element.Name = _ns + tItem;

        //change masterForm
        _RecordTypeChange(Item.masterForm.element.Attribute("puid").Value, Item.masterForm.element.Attribute("object_type").Value, tMasterForm);
        Item.masterForm.element.Attribute("object_type").Value = tMasterForm;

        //change masterForm Storage
        if (Item.masterForm.storage != null)
        {
            _RecordTypeChange(Item.masterForm.storage.Attribute("puid").Value, Item.masterForm.storage.Name.LocalName, tMasterFormS);
            Item.masterForm.storage.Name = _ns + tMasterFormS;
        }

        foreach (var tc in Item.revisions)
        {
            //change revision type
            _RecordTypeChange(tc.element.Attribute("puid").Value, tc.element.Attribute("object_type").Value, tRevision);
            tc.element.SetAttributeValue("object_type", tRevision);
            tc.element.Name = _ns + tRevision;

            //change masterRevForm
            _RecordTypeChange(tc.masterRevForm.element.Attribute("puid").Value, tc.masterRevForm.element.Attribute("object_type").Value, tMasterRevForm);
            tc.masterRevForm.element.Attribute("object_type").Value = tMasterRevForm;

            if (tc.masterRevForm.storage != null)
            {
                //change masterRevFormStorage
                _RecordTypeChange(tc.masterRevForm.storage.Attribute("puid").Value, tc.masterRevForm.storage.Name.LocalName, tMasterRevFormS);
                tc.masterRevForm.storage.Name = _ns + tMasterRevFormS;
            }
        }
    }

    private static void _TCPropagateItemRevision(XElement _rev, string sItem, string sRevision, string sMasterForm, string sMasterFormS, string sMasterRevForm, string sMasterRevFormS, string tItem, string tRevision, string tMasterForm, string tMasterFormS, string tMasterRevForm, string tMasterRevFormS)
    {
        var Revision = new Classes.RevisionClass(_rev,sItem,sRevision,sMasterFormS,sMasterRevFormS);

        //change Item
        _RecordTypeChange(Revision.item.element.Attribute("puid").Value, Revision.item.element.Attribute("object_type").Value, tItem);
        Revision.item.element.SetAttributeValue("object_type", tItem);
        Revision.item.element.Name = _ns + tItem;

        //change masterForm
        _RecordTypeChange(Revision.item.masterForm.element.Attribute("puid").Value, Revision.masterRevForm.element.Attribute("object_type").Value, tMasterForm);
        Revision.item.masterForm.element.Attribute("object_type").Value = tMasterForm;

        //change masterForm Storage
        if (Revision.item.masterForm.storage != null)
        {
            _RecordTypeChange(Revision.masterRevForm.storage.Attribute("puid").Value, Revision.masterRevForm.storage.Name.LocalName, tMasterFormS);
            Revision.item.masterForm.storage.Name = _ns + tMasterFormS;
        }

        foreach (var tc in Revision.item.revisions)
        {
            //change revision type
            _RecordTypeChange(tc.element.Attribute("puid").Value, tc.element.Attribute("object_type").Value, tRevision);
            tc.element.SetAttributeValue("object_type", tRevision);
            tc.element.Name = _ns + tRevision;

            //change masterRevForm
            _RecordTypeChange(tc.masterRevForm.element.Attribute("puid").Value, tc.masterRevForm.element.Attribute("object_type").Value, tMasterRevForm);
            tc.masterRevForm.element.Attribute("object_type").Value = tMasterRevForm;

            if (tc.masterRevForm.storage != null)
            {
                //change masterRevFormStorage
                _RecordTypeChange(tc.masterRevForm.storage.Attribute("puid").Value, tc.masterRevForm.storage.Name.LocalName, tMasterRevFormS);
                tc.masterRevForm.storage.Name = _ns + tMasterRevFormS;
            }
        }
    }